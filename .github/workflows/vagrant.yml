name: Release VyOS current vagrant boxes

on:
  workflow_dispatch:
  schedule:
    - cron: '30 0 * * *'

env:
  VAGRANT_VERSION: 2.4.1-1

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      latest_iso_version: ${{ steps.set_latest_iso_version.outputs.latest_iso_version }}
      current_box_version: ${{ steps.set_current_box_version.outputs.current_box_version }}
      iso_url: ${{ steps.set_iso_url.outputs.iso_url }}
    steps:
      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          result-encoding: string
          debug: true
          script: |
            const result = await github.rest.repos.getLatestRelease({
              owner: "vyos",
              repo: "vyos-rolling-nightly-builds",
            });
            console.log(result);
            return result.data.tag_name;
      - name: Set latest iso version
        id: set_latest_iso_version
        run: |
          v=$(echo ${{steps.get_latest_release.outputs.result}} | cut -d'-' -f3)
          echo "latest_iso_version: ${v:0:8}.${v:8:2}.${v:10:2}"
          echo "latest_iso_version=${v:0:8}.${v:8:2}.${v:10:2}" >> $GITHUB_OUTPUT
      - name: Set iso url
        id: set_iso_url
        run: |
          v="${{steps.get_latest_release.outputs.result}}"
          echo "iso_url: https://github.com/vyos/vyos-rolling-nightly-builds/releases/download/${v}/vyos-${v}-amd64.iso"
          echo "iso_url=https://github.com/vyos/vyos-rolling-nightly-builds/releases/download/${v}/vyos-${v}-amd64.iso" >> $GITHUB_OUTPUT
      - name: Set current box version
        id: set_current_box_version
        run: |
          v=$(curl -s --header "Authorization: Bearer $VAGRANT_TOKEN" https://app.vagrantup.com/api/v1/box/vyos/current | jq -r .current_version.version)
          echo "current_box_version=${v}" >> $GITHUB_OUTPUT
        env:
          VAGRANT_TOKEN: ${{ secrets.vagrant_token }}

  build:
    needs: get_version
    if: needs.get_version.outputs.latest_iso_version != needs.get_version.outputs.current_box_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider: ['libvirt', 'virtualbox']
        box_name: ['vyos/current', 'higebu/vyos']
    steps:
      - uses: actions/checkout@v4
        with:
          ref: actions
      - run: pipx install --include-deps ansible
      - run: |
          ansible-playbook vagrant-${{ matrix.provider }}.yml -e vyos_vagrant_box_name=${{ matrix.box_name }} -e box_version=${{ needs.get_version.outputs.latest_iso_version }} -e release=True -e vyos_iso_url=${{ needs.get_version.outputs.iso_url }}
      - name: create version
        env:
          VAGRANT_TOKEN: ${{ secrets.vagrant_token }}
        run: |
          curl \
            --request POST \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $VAGRANT_TOKEN" \
            https://app.vagrantup.com/api/v2/box/${{ matrix.box_name }}/versions \
            --data '
              {
                "version": {
                  "version": "${{ needs.get_version.outputs.latest_iso_version }}",
                  "description": "Generated by https://github.com/higebu/vyos-vm-images"
                }
              }
            '
      - name: Create provider
        env:
          VAGRANT_TOKEN: ${{ secrets.vagrant_token }}
        run: |
          default_architecture="false"
          if [[ "${{ matrix.provider }}" == "virtualbox" ]]; then
            default_architecture="true"
          fi
          checksum=$(sha256sum ./build/vyos_vagrant_${{ matrix.provider }}_image.box | cut -d' ' -f1)
          data=$(cat <<EOF
          {
            "provider": {
              "checksum": "${checksum}",
              "checksum_type": "sha256",
              "name": "${{ matrix.provider }}",
              "architecture": "amd64",
              "default_architecture": ${default_architecture}
            }
          }
          EOF
          )
          curl \
            --request POST \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $VAGRANT_TOKEN" \
            https://app.vagrantup.com/api/v2/box/${{ matrix.box_name }}/version/${{ needs.get_version.outputs.latest_iso_version }}/providers \
            --data "$data"
      - name: Upload box
        env:
          VAGRANT_TOKEN: ${{ secrets.vagrant_token }}
        run: |
          set -x
          upload_path=""
          while [ -z "$upload_path" ]; do
            response=$(curl -X GET --header "Authorization: Bearer $VAGRANT_TOKEN" https://app.vagrantup.com/api/v2/box/${{ matrix.box_name }}/version/${{ needs.get_version.outputs.latest_iso_version }}/provider/${{ matrix.provider }}/amd64/upload)
            upload_path=$(echo "$response" | jq -r '.upload_path // empty')
            if [ -z "$upload_path" ]; then
              echo "retry..."
              sleep 1
            fi
          done
          curl -X PUT --upload-file ./build/vyos_vagrant_${{ matrix.provider }}_image.box "${upload_path}"

  release_version:
    needs: [get_version, build]
    if: needs.get_version.outputs.latest_iso_version != needs.get_version.outputs.current_box_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        box_name: ['vyos/current', 'higebu/vyos']
      max-parallel: 1
    steps:
      - name: vagrant cloud version release
        env:
          VAGRANT_TOKEN: ${{ secrets.vagrant_token }}
        run: |
          curl -X PUT --header "Authorization: Bearer $VAGRANT_TOKEN" https://app.vagrantup.com/api/v2/box/${{ matrix.box_name }}/version/${{ needs.get_version.outputs.latest_iso_version }}/release
